rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    function currentUser() {
      return isLoggedIn() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    function isGiftedPremium(user) {
      return user.giftedPremiumStart != null && user.giftedPremiumEnd != null 
          && request.time >= user.giftedPremiumStart 
          && request.time <= user.giftedPremiumEnd;
    }

    function isPremium() {
      return request.auth.token.stripeRole == "premium" || isGiftedPremium(request.resource.data);
    }

    function isAdmin() {
      let user = currentUser();
      return user != null && user.isAdmin;
    }

    function isModerator() {
      let user = currentUser();
      return user != null && user.isModerator;
    }

    function isCallbacker() {
      let user = currentUser();
      return user != null && user.isCallbacker;
    }

    function affectedKeys() {
      return request.resource.data.diff(resource.data).affectedKeys();
    }

    function isLoggedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isVerified() {
      return request.auth.token.email_verified == true;
    }

    function isAnonymous() {
      return !("email" in request.auth.token);
    }

    function canCreateMessage(data) {
      let user = currentUser();

      let isBanned = user != null && user.isBanned;
      let isThisUser = data.uid == request.auth.uid
                      && data.username == user.username 
                      && data.lowercaseUsername == user.lowercaseUsername;
      let hasValidKeys = data.isDeleted == false;
      // Within one minute of the request.
      let isValidTime = data.createdAt < request.time + duration.value(1, 'm')
                        && data.createdAt > request.time - duration.value(1, 'm');
      
      let isValidLength = data.text.size() < 3000;

      let containsFilteredWords = exists(/databases/$(database)/documents/settings/filteredWords) ?
                                  data.text.matches(get(/databases/$(database)/documents/settings/filteredWords).data.regex) :
                                  false;

      return isLoggedIn() && !isBanned && isThisUser && hasValidKeys && isValidTime && !containsFilteredWords && isValidLength;
    }

    match /messages/{docId} {
      allow create: if canCreateMessage(request.resource.data);
      allow read: if resource.data.isDeleted == false || (isLoggedIn() && (isModerator() || isAdmin()));
      allow update: if (isModerator() || isAdmin()) && 
                      // If the request only has the isDeleted field
                      // https://firebase.google.com/docs/firestore/security/rules-fields#allowing_only_certain_fields_to_be_changed
                      affectedKeys().hasOnly(["isDeleted"]);
    }

    function canUpdateAggregateMessages(){
      
      let data = request.resource.data;
      let listAfter = (data.list);
      let newMessage = (data.get("lastCreated", null));
      let deletedMessages = (data.get("lastDeleted", null));
      let x = debug("DEBUG: ")
      let diff = debug(listAfter.diff(resource.data.list));

      let isCreate = 
        // THIS IS A CREATE IF...
        // ...1 new message in list...
        ((diff.addedKeys().size() == 1 )
        // ...AND 1 new message (new "lastCreated")...
        && (newMessage != null)
        // ...AND promised new message is only new one...
        && (diff.addedKeys().hasOnly([newMessage.id])));

      let isDelete = 
        // THIS IS A DELETE IF...
        // ...any messages removed...
        ((diff.removedKeys().size() > 0)
        // ...AND there are deleted messages (new "lastDeleted")...
        && (deletedMessages != null)
        // ...AND promised deleted messages are the only ones deleted...
        && (diff.removedKeys().hasOnly(deletedMessages.keys())));
      
      let isInvalid = 
        // THIS OPERATION IS INVALID IF...
        // ...it is not a delete AND not a create...
        (!isDelete && !isCreate) 
        // ...OR it is a delete AND not a create (AND not a mod)...
        || (isDelete && !isCreate && !(isModerator() || isAdmin())) 
        // ...OR creating more than 1 message...
        || (diff.addedKeys().size() > 1)
        // ...OR deleting more than allowed...
        || (isDelete && diff.unchangedKeys().size() < 25 && !(isModerator() || isAdmin()))
        || (isCreate && !canCreateMessage(newMessage));

      return (!isInvalid);
    }
  
    match /aggregateMessages/{docId} {
      allow create: if true;
      allow read: if true;
      allow update: if canUpdateAggregateMessages();
      allow delete: if isModerator() || isAdmin();
    }

    match /modActionLog/{docId} {
      allow read: if isLoggedIn() && isAdmin();
      allow create: if isLoggedIn() && isAdmin();
      allow delete: if isLoggedIn() && isAdmin();
    }

    match /settings/filteredWords {
      // NOTE: May pose a risk (i.e. if filtered words contain secrets that would not be guessable)
      allow read: if isLoggedIn();
      allow create: if isLoggedIn() && isAdmin();
      allow update: if isLoggedIn() && isAdmin();
      allow delete: if isLoggedIn() && isAdmin();
    }
  
    match /userPresences/{docId} {
      allow create: if true;
      allow read: if true;
      allow update: if true;
      allow delete: if true;
    }
  
    match /conversations/{conversationId} {
      allow create: if isLoggedIn() && isVerified() && request.auth.uid in request.resource.data.userIds;
      allow read: if isLoggedIn() && request.auth.uid in resource.data.userIds;
      allow update: if isLoggedIn() && request.auth.uid in resource.data.userIds;

      match /messages/{messageId} {
        allow create: if isLoggedIn() && isVerified();
        allow read: if isLoggedIn() && (resource.data.isDeleted == false || isModerator() || isAdmin());
      }
    }
  
    match /users/{uid} {
      allow read: if true;
      allow update: if isAdmin() ||
                    ( isDocOwner(uid)
                    && !isAnonymous()
                    // NOTE: DON'T allow updating these keys
                    && (!affectedKeys().hasAny(["isAdmin", "isModerator", "isBanned", "ipAddresses", "giftedPremiumStart", "giftedPremiumEnd", "username", "lowercaseUsername"]))
                    // NOTE: DON'T allow updating these keys UNLESS user is premium
                    && (isPremium() 
                        || (!affectedKeys()
                            .hasAny(["msgBgImg", "msgBgColor", "msgBgTransparency", "msgBgRepeat", "msgBgPosition", "msgBgImgTransparency"])
                            && (!affectedKeys().hasAny(["fontSize"]) || request.resource.data.fontSize < 15 ))) );
      
      match /checkout_sessions/{id} {
        allow read, create: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
    }
    
    function isDocOwner(docId) {
      let isOwner = request.auth.uid == docId;

      return isLoggedIn() && isOwner;
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    match /oembedProviders/{docId} {
      allow read: if true;
    }

    match /callbacks/{docId} {
      allow create: if isCallbacker();
      allow read: if true;
    }

    match /debugLog/{userId}/log/{docId} {
      allow create: if true;
      allow update: if true;
    }
  }
}